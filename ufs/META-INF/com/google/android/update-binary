#!/sbin/sh
#
#	General META-INF/update-binary template
#	
#	CodRLabworks
#	CodRCA: Christian Arvin Catajoy Cabo
#	      : C.A.META-INF_update-binary
#
#	Description:
#
#	 This is a general template for update.zip designed by C.A. for his scripts.
#	The aim of this script is to have a template for an update zip. eliminating the
#	need to always modify the update-binary. 1.)If you are going to use my script please
#	do not remove this header. 2.)You can use it freely as much as you want. 3.)You are
#	allowed to modify this script. 4.)If modification has caused the whole script
#	to be unrecognizingly different from my original script, just reference me and this
#	script on the header.
#
#	Dependents
#		1.) root path must include a core folder.
#		2.) core folder must have the installer.sh script.
#		3.) installer.sh script is where your mainscript would be.
#
#	Global Folder and File Structures
#	
#	META-INF/com/google/android/update-binary	- this script
#	core/installer.sh							- your script, it will be called by this script
#	core/library/*								- library files.
#
#	Global Variables
#		This variables are passed to the installer.sh
#	ZIP		-This is the zip filename location where this script was called.
#	OUTFD	-The out FD that was pass to this script by the recovery env.
#	COREDIR	-The location of extracted core files from the zip
#	LIBS	-The location of library
#

# Global Variables
#------------------------------------------------------------------------#
export OUTFD=$2
export ZIP=$3
export COREDIR=/tmp/core
export BINARIES=/tmp/core/bin
export LIBS=/tmp/core/library
export INSTALLER=/tmp/core/installer.sh
export INIT=/tmp/core/init.sh
export SYSTEM=/system
export BINARCH=arm
bb=$BINARIES/busybox-arm

# Functions
# _______________________________________________________________________________________________________
#

ui_print() {
	echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD;
	echo -n -e "ui_print\n"    >> /proc/self/fd/$OUTFD;
	echo "COLD_LOG $1" >> $TMP_LOG;
	#TMP_LOG="${TMP_LOG}"$'\n'"COLD_LOG $1"
}

ColdLog() {
	echo "COLD_LOG $1" >> $TMP_LOG
	#TMP_LOG="${TMP_LOG}"$'\n'"COLD_LOG $1"
	printf "$1\n"
}

exit_() {
	(sleep 1;kill_tail_recovery)
	CLEAR_TMP_LOG;
	exit $1
}

fd_log(){
	devlogs=/sdcard/logs/.devlogs
	[ ! -e $devlogs ] && install -d $devlogs
	(printf $'\n\n\n\n'"BEGIN RECOVERY TAIL LOGS"$'\n\n';tail -fq /tmp/recovery.log >> $devlogs/recovery.log & echo $! >/tmp/TLPID)&	
}

kill_tail_recovery(){
	PID=$(cat /tmp/TLPID)
	kill -SIGTERM $PID || \
	echo "Error. Unable to kill tail recovery, Manually Reboot the device."
}

INIT_TMP_LOG() {
	export TMP_LOG=/sdcard/logs/.devlogs/tmp_log
	# Create Directory
	[ ! -e "$TMP_LOG" ] && {
		install -d /sdcard/logs/.devlogs
		export INIT_TMP_LOG=true
		echo $'\n'"TMP_LOG INIT BY UPDATE-BINARY"$'\n' > $TMP_LOG
	}
}

CLEAR_TMP_LOG() {
	[ -e $TMP_LOG ] && rm -r $TMP_LOG
}

export ColdLog=ColdLog

# Pre-Initialization
# _______________________________________________________________________________________________________
#

# init tmp_log
INIT_TMP_LOG;

# START FD_LOG
fd_log;

case "$(uname -m)" in 
	*mip*)
		{(getprop ro.product.cpu.abilist | grep 64) && \
		export BINARCH="mips64";} || \
		export BINARCH="mips"
		;;
	*ar*)
		{(getprop ro.product.cpu.abilist | grep v8) && \
		export BINARCH="arm64";} || \
		{(getprop ro.product.cpu.abilist | grep v7) && \
		export BINARCH="arm";} || \
		export BINARCH="arm"
		;;
	*86*|*64)
		{(getprop ro.product.cpu.abilist | grep x86_64) && \
		export BINARCH="x86_64";} || \
		export BINARCH="x86"
		;;
esac

ufsBIN="busybox zip lzmadec xzdec"

eval bb="$BINARIES/busybox-$BINARCH"
eval l="$BINARIES"

ColdLog "I: UPDATE-BINARY: BINARCH is $BINARCH"
ColdLog "I: UPDATE-BINARY: Busybox set to $bb"
# Post-Initialization
# _______________________________________________________________________________________________________
#
setenforce 0
if [ ! -f "/sbin/unzip" ]; then
	# recovery is unstable
	ui_print "- BAD RECOVERY DETECTED, NO UNZIP, ABORTING.."
	exit 1
fi

# clean COREDIR remnants of past install
[ -e "$COREDIR" ] && rm -rf "$COREDIR"

# get the unzip list
unzip -o "$ZIP" "core/unzip.list" -d "/tmp"

[ -e "/tmp/core/unzip.list" ] && {
	for L in `cat /tmp/core/unzip.list` "bin/busybox-$BINARCH";do
		unzip -o "$ZIP" "core/$L" -d "/tmp"
		[ ! -e "/tmp/$L" ] && ColdLog "E: UPDATE-BINARY: unable to extract $L"
	done
} || {
	# default unzip core
	unzip -o "$ZIP" "core/*" -d "/tmp"
}

# create the binaries directory
install -d "$BINARIES"


# Main
# _______________________________________________________________________________________________________
#

# chmod binaries
for bin in $ufsBIN; do
	[ ! -e "$BINARIES/$bin-$BINARCH" ] && \
	ColdLog "E: UPDATE-BINARY: $bin-$BINARCH does not exist, maybe not supported yet by your arch." || {
		chmod +x "$BINARIES/$bin-$BINARCH"
		[[ "$bin" != "busybox" && -e "$BINARIES/$bin-$BINARCH" ]] && {
		  ! ln -sf "$BINARIES/$bin-$BINARCH" "$BINARIES/$bin" && {
			  # create script wrapper if symlinking and hardlinking failed because of restrictive selinux policy
			  ! echo "$BINARIES/$bin-$BINARCH" > "$BINARIES/$bin" || \
			  ! chmod +x "$BINARIES/$bin" && {
				ui_print "ERROR 10: Failed to set-up pre-bundled $bin "
				ui_print "Please use TWRP as recovery instead"
				exit_ 1
			  }
		  }
		}
	}
done

[ -e "$bb" ] && {
  for i in $($bb --list); do
    ! ln -sf "$bb" "$BINARIES/$i"     && \
	! $bb ln -sf "$bb" "$BINARIES/$i" && \
	! $bb ln -f "$bb" "$BINARIES/$i"  && {
      # create script wrapper if symlinking and hardlinking failed because of restrictive selinux policy
      ! echo "#!$bb" > "$BINARIES/$i" || \
	  ! chmod +x "$BINARIES/$i" && {
        ui_print "ERROR: Failed to set-up pre-bundled busybox"
        ui_print "Please use TWRP as recovery instead"
        exit_ 10
      }
    }
  done
  PATH="$BINARIES:$PATH" $bb ash "$INIT" "$@"
  exit_ $?
} || {
	ui_print "ERROR: Unable to load pre-bundled busybox"
	exit_ 12
}
