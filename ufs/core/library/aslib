#!/sbin/sh
#
#	aslib Library
#
#   CodRLabworks
#   CodRCA : Christian Arvin
#

#
#	Collection of General Function useful in recovery
# 
#   NOTE:
#	 This script is dedicated for uniFlashScript installer.sh
#	
#

# PRE-INIT
# --------------------------------------------------------------------------------
# I: PRE-INIT here

# set ulimit
ulimit -s 65536

export aslib_version=1000
export aslib_funcbasic="ui_print set_perm set_progress progress get_prop set_file_prop";
export aslib_funcmain="asAddon asExtract asInstall asWipelist"
export aslib_funcadvance="alLog alLSet alLInit def_check def_config_check";
export aslib_logpath=/sdcard/logs/ufs


# VARIABLE CONFIGS
# --------------------------------------------------------------------------------
# I: DEFINE your variable configs here

# ############################ # This Configs are essential for aslib function operations.
#     CONFIG DEFINATION        # You can create your config file and source it and use the defs found here.
# ############################ # but you need to run the def_config_check() as precaution for invalid configs

# ASLIB CONFIG
export aslib_req=1000;                  # alib required version
export aslib_asWipelist=1               # set to zero to disable wipe function
export aslib_asAddon=1                  # set to zero to disable addon function
export aslib_asInstall=1                # set to zero to disable install function
export aslib_asExtract=1                # set to zero to disable extract function

# ASLIB LOG CONFIGS
export aslib_log_type="flash"           # set to flash or update
export aslib_log_level=3                # set the logging level
export aslib_log_enabled=1              # set to zero to disable aslib Loggin function
export aslib_log_logname="aslog"        # default log name

# ASLIB ADDON CONFIGS
export addon_name="uniFlashScript"      # default addon name
export addon_delay=50                   # default addon delay
export addon_tail="addon_tail.sh"       # default addon template name

# ASLIB PRE_CHECK CONFIGS
export init_pre_check=0;                # ! ESSENTIAL VALUE DO NOT MODIFY !
export init_create_wipelist=0;          # ! ESSENTIAL VALUE DO NOT MODIFY !

export pc_calc_zip_buffer=5             # zip buffer size
export pc_calc_sys_buffer=500           # system buffer
export pc_size_fix=353600;              # fix minimum size requirement if pc_size_zip is undetermined
export pc_totl_sys=0                    # autogen : total system size
export pc_size_zip=0                    # autogen : zip size
export pc_size_min=0                    # autogen : minimum size limit
export pc_free_tmp=0                    # autogen : size of /tmp
export pc_free_sd0=0                    # autogen : size of /sdcard
export pc_free_sd1=0                    # autogen : size of /sdcard1
export pc_free_sys=0                    # autogen : /system free space
export pc_stat_sys=0                    # autogen : 0 if system has no errors
export pc_stat_sd0=0                    # autogen : 0 if sdcard has no errors
export pc_stat_sd1=0                    # autogen : 0 if sdcard1 has no errors
export pc_stat_tmp=0                    # autogen : 0 if tmp has no errors


# VARIABLE DECLARATION 
# --------------------------------------------------------------------------------
# I: ESSENTIAL variables ! DO NOT MODIFY !

export SOURCEDIR=;
export SOURCEFS=;
export SOURCESYS=;                       


# ASLIB COLD_LOG CONFIGS
export flush_logs=1;
export ColdLog=ColdLog;

# ASLIB GET_PROP CONFIGS
export PROPFILES="/system/default.prop /system/build.prop /data/local.prop /default.prop /build.prop";

# ASLIB DEF_CONFIG_CHECK
loc_of_config=;                   # MUST BE DEFINED BY INSTALLER SH or def_config_check() will be disabled
loc_of_aslib=;                    # MUST BE DEFINED BY INSTALLER SH or def_config_check() will be disabled

# ASLIB PRINT_HEADER
export TMH0=;
export TMH1="aslib config"
export TMH2="*******************************"
export TMH3="       ASLIB PRINT HEADER"
export TMH4="*******************************"
export TMH5="app: aslib"
export TMH6="src: TEST"
export TMH7="rev: TEST"
export TMH8=;

# list of configs check
export def_config_list="
aslib_req
aslib_asWipelist
aslib_asAddon
aslib_asInstall
aslib_asInstall_ow
aslib_asExtract
aslib_log_type
aslib_log_level
aslib_log_enabled
aslib_log_logname
addon_name
addon_delay
addon_tail
pc_calc_zip_buffer
pc_calc_sys_buffer
pc_size_fix
PROPFILES
"

# ! DEFCHECK CONFIG SPECIFIC SETTING DO NOT MODIFY OR REMOVE!
last_config_loaded=aslib_config

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! # For aslib logging to function properly this config are needed
#    Do not modify this variables      # to be set properly right after aslib has been sourced.
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! # You can config each value on your script after aslib has been loaded.

# CRUCIAL CONFIGS FOR ALLOG
export LT1=ColdLog	# ! DO NOT MODITY ! Logging Tag-1 ColdLog means disabled
export LT2=ColdLog	# ! DO NOT MODITY ! Logging Tag-2 ColdLog means disabled
export LT3=ColdLog	# ! DO NOT MODITY ! Logging Tag-3 ColdLog means disabled
export LT4=ColdLog	# ! DO NOT MODITY ! Logging Tag-4 ColdLog means disabled



[ -z "$aslib_log_enabled" ] && al_enable=1                   || al_enable=$aslib_log_enabled
[ -z "$aslib_log_type"    ] && aslib_log_type=flash          || aslib_log_type=$aslib_log_type
[ -z "$aslib_log_level"   ] && al_level=1                    || al_level=$aslib_log_level
[ -z "$aslib_log_logname" ] && aslib_log_logname="aslib_log" || aslib_log_logname=$aslib_log_logname
[ -z "$al_init" ] && al_init=0





# FUNCTIONS
# --------------------------------------------------------------------------------
# I: ASLIB_LOADER functions

##### ASLIB_CLEAR
ASLIB_CLEAR(){
	# I: clears files and directory
	local SL="/:/system:/sdcard:/sdcard1:/data:/tmp"
	if [ "$1" == "CLEAR" ];then
		$ColdLog "I: ASLIB_LOADER ASLIB_CLEAR: Clearing..."
		local IFS=$':'
		for L in $ASLIB_CLEAR;do
			[ -e "$L" ] && {
				# perform removal and strictly scrutinize the paths we don't want a nuclear disaster.
				local T=false
				for S in $SL;do [[ "$S" == "$L" || "$S" == "$L/" || "$S" == "$L//" ]] && T=true;done
				[ "$T" == "false" ] && {
					rm -rf "$L"
				}	
			}
		done
	else
		[ "$1" != "YOUR_PATH" ] && {
			ASLIB_CLEAR="$ASLIB_CLEAR:$@"
		}
	fi
	
	return 0
}

##### ASLIB_LOADLIB
ASLIB_LOADLIB(){
	$ColdLog "I: ASLIB LOADER: Loading Libraries"
	local LM=;L_LIST=;
	for func in $(find $ASLIB_LIBDP -type f -name func.*.aslib);do
		local AS_SCRIPT=`basename $func`;local LIBNAME="$(echo $AS_SCRIPT | cut -d. -f 2-2)";L_LIST="$L_LIST$LIBNAME"$'\n'
		[ -e "$func" ] && \
		command . $func && \
		LM="LOADED" || {
		LM="LIBRARY UNLOADABLE"
		}
		$ColdLog "I: ASLIB LOADER: LOADING $(printf "%-35s %s\n" "$LIBNAME..." "$LM")"
	done
	
	$ColdLog "I: ASLIB LOADER: Initializing libraries"
	for L in $L_LIST;do
		init_$L >/dev/null 2>&1 || echo "Warning no properly defined init function, check $L"
	done
}

##### COLDLOG
ColdLog() {
	#TMP_LOG="${TMP_LOG}"$'\n'"$(date "+%H:%M:%S") $1"
	echo "$(date "+%H:%M:%S") $1" >> $TMP_LOG
	printf "$1\n"
}

##### TMP_LOG
INIT_TMP_LOG() {
	export TMP_LOG=/sdcard/logs/.devlogs/tmp_log
	# Create Directory
	[ ! -e "$TMP_LOG" ] && {
		install -d /sdcard/logs/.devlogs
		export INIT_TMP_LOG=true
		echo $'\n'"TMP_LOG INIT BY UPDATE-BINARY"$'\n' > $TMP_LOG
	}
}

# START TMP_LOG
[[ -z "$INIT_TMP_LOG" && "$INIT_TMP_LOG" != "true" ]] && INIT_TMP_LOG;


# INIT
# --------------------------------------------------------------------------------
# I: INITIALIZE aslib loader

# Init ASLIB_CLEAR
export ASLIB_CLEAR="INIT"

# Init ColdLog
export ColdLog=ColdLog

# ASLIB LOAD LIBRARY DIRECTORY PATH
# I: Seek for aslib directory, ASLIB_LIBDP need to be an exported variable defined by sourcing this loader.
#    It is the path where this loader resides and all the included library.
[[ -z "$ASLIB_LIBDP" || ! -d "$ASLIB_LIBDP" ]] && {
	$ColdLog "E: ASLIB LOADER: ASLIB_LIBDP is undefined, trying to locate aslib parent path"
	local _0_DIR_NAME="$(dirname $0)"
	[ -e "$_0_DIR_NAME/aslib" ] && {
		export ASLIB_LIBDP="$_0_DIR_NAME"
	} || {
		printf "ASLIB LOADER ERROR: Unable to find loader PATH, $ASLIB_LIBDP is invalid"
		exit 1
	}
}

# LOAD ALL LIBRARY
ASLIB_LOADLIB


# update_binary var check -AslibUpdateBinary- or aub
# SOURCEDIR, BINARIES, INSTALLER, ZIP
[[ -z "$SOURCEDIR" && -z "$BINARIES" && -z "$INSTALLER" && -z "$ZIP" ]] && {
	$ColdLog "I: ASLIB LOADER: Were probably running in ota_mode"
	aub=0
} || {
	$ColdLog "I: ASLIB LOADER: Were probably running in flash_mode"
	aub=1
}

##### INFORM USER THAT ASLIB IS LOADED
$ColdLog "I: ASLIB LOADER: FINISHED SOURCING ASLIB LIBRARY"