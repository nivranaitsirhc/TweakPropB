#!/sbin/sh
#
#	aslib library
#
#	CodRLabworks
#	CodRCA aslib Library Template v4
#

# LIBRARY DESCRIPTION
# --------------------------------------------------------------------------------
# I: ASLIB basic tools and functions
#
#

# ----------------------------- ASLIB LIBRARY HEADER -----------------------------
# ASLIB CLEAR
# --------------------------------------------------------------------------------
# I: Add The Paths of the files or directory that will be cleared by ASLIB_CLEAR separated by a (:) double dot
[ -z "$ASLIB_CLEAR" ] && {
	# aslib clear is not defined by aslib loader may be obsolete or library is sourced directly
	printf "I: Lib $AS_SCRIPT is sourced directly"
}
ASLIB_CLEAR "YOUR_PATH"
# ---------------------------------- END HEADER ----------------------------------

# INIT VARIABLES
# --------------------------------------------------------------------------------
# I: INIT your variables here. avoid exporting your variables here. add it in the
#    aslib loader.


# FUNCTIONS
# --------------------------------------------------------------------------------
# I: DEFINE your functions

##### ASLIB.SUB.SET_PERM
# - set_perm	input1 input2 input3 input4 input 5
# input1		-> chown user	!--important--!
# input2		-> chown group	!--important--!
# input3		-> chmod setup	!--important--!
# input4		-> target_file	!--important--!
set_perm() {
	# parse
	local u="0";local g="0";local m="0755";local D="$5";local P="u:object_r:system_file:s0";
	if   [[ -z "$5" && -z "$2" ]];then
		D="$1"					# assuming one input
	elif [[ -z "$4" && -n "$3" ]];then
		D="$3";u="$1";g="$2"	# assuming chown input
	elif [[ -z "$3" && "$1" == "${1/object_r/}" ]];then
		D="$2";m="$1";			# assuming mode input
	elif [[ -z "$3" && "$1" != "${1/object_r/}" ]];then
		D="$2";P="$1"			# context input
	elif [[ -z "$5" && -e "$4" && "$3" == "${3/object_r/}" ]];then
		D="$4";u="$1";g="$2";m="$3";
	else
		D="$5";u="$1";g="$2";m="$3";P="$4"
	fi
	$LT4 "D: ASLIB set_perm: setting permission $u - $g $m $P $D"
	chown "$u.$g" "$D"	||\
	chown "$u:$g" "$D"	
	chmod "$m" "$D"		
	ch_con_ext "$P" "$D"
	return 0
}

# MKDIR_P create directory and its parent if it not exist
mkdir_p(){
	# Make Directory w/ Permission
	local u="0";local g="0";local m="0755";local D="$4";local LIST=;
	if   [[ -z "$4" && -z "$2" ]];then
		D="$1"					# assuming one input
	elif [[ -z "$4" && -n "$3" ]];then
		D="$3";u="$1";g="$2"	# assuming chown input
	elif [[ -z "$3" && -n "$2" ]];then
		D="$2";m="$1";			# assuming mode input
	else
		D="$4";u="$1";g="$2";m="$3"
	fi
	
	# Set Permission & Exit if Directory Already Exist
	[[ -e "$D" && -d "$D" ]] && {
		set_perm "$u" "$g" "$m" "$D" || {
			chown "$u.$g" "$D" && chmod "$m" "$D"
		}
	} || {
		local TD="$D"
		# check only non existing directory
		while [ ! -d "$TD" ];do
			LIST="$TD"$'\n'"$LIST"
			TD=`dirname $TD`
		done
		
		# create directory
		$LT4 "D: ASLIB mkdir_p: creating directory path $D, with $u:$g - mode $m"
		for L in $LIST;do
			mkdir "$L"
			chown "$u.$g" "$L" && chmod "$m" "$L"
		done
	}
	[ ! -e "$1" ] && return 1 || return 0
}

# copy permission
cp_perm(){
	[ -e "$2" ] && {
		$LT3 "I: ASLIB cp_perm: copying permission from $1 to $2"
		local u=`stat -c %u "$1"` &&\
		local g=`stat -c %g "$1"` &&\
		local m=`stat -c %a "$1"` &&\
		set_perm $u $g 0$m "$2"    || {
			$LT4 "E: ASLIB cp_perm: unable to stat $1"
			return 1
		}
	} || {
		$LT4 "E: ASLIB cp_perm: $2 does not exist"
		return 1
	}
}

#copy file and set permission
copy_fsp(){
	local opt1=;local opt2=;local mode=; #accepted mode is root
	[ -n "$3" ] && {
		opt1="$2";opt2="$3";mode="$1"
	} || {
		opt1="$1";opt2="$2"
	}
	DN=`dirname $opt1`;#BN=`basename $opt2`;
	[ ! -e "$DN" ] && {
		# recreate directory
		mkdir -p "$DN"
	}
	# use copy instead of
	cp -dp "$opt1" "$opt2" || {
		if [ ! -L "$1" ];then
			(dd if="$opt1" of="$opt2") && {
				[ "$mode" != "root" ] && {
					local u=`stat -c %u "$opt1"`;
					local g=`stat -c %g "$opt1"`;
					local m=`stat -c %a "$opt1"`;
					set_perm $u $g $m "$opt2"
					return 0 # no need to proceed
				} # proceed if in root mode.
			} || {
				$LT4 "W: ASLIB copy_fsp: FAILED, unable to copy $opt1"
				return 1
			}
		else
			$LT4 "W: ASLIB copy_fsp: FAILED, unable to copy link file $opt1"
			return 1
		fi
	}
	# ignore link files
	[ ! -L "$opt1" ] && {
		# [ "$mode" == "root" ] && {
			set_system_fp "$opt2"
		# } || {
			# # it is assumed that every label starts with 'u:object_r' and has no white-spaces
			# local context=`ls -Z "$1" | grep -o 'u:object_r:[^ ]*' | head -1`
			# [ -z "$context" ] && {
				# ch_con "$2" || chcon "u:object_r:system_file:s0" "$2"
			# } || {
				# ch_con_ext "$context" "$2" || chcon "$context" "$2"
			# }
		# }
	}
}

# INIT SCRIPT
# --------------------------------------------------------------------------------
# I: INITIALIZE your library

# Rename this function with format init_YOUR_LIBRARY_NAME as it will be run by aslib loader after
# all the libraries are loaded. 
# e.g.
# your library					proper function init name	 
# func.DUMMY_LIBRARY.aslib ->	init_DUMMY_LIBRARY(){}
#

init__toolbox(){
	return 0
}

# ASLIB RETURN CONFIRMATION
# --------------------------------------------------------------------------------
# 
printf "SCRIPT LOADED $AS_SCRIPT\n"