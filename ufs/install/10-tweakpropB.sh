#!/sbin/sh
#
#	uniFlashScript
#
#   TweakPropB Addon Script
#
#
#   Title:      Tweak Build Prop Survival ScriptAsus Stock Apps
#   src:        tweakprop http://forum.xda-developers.com/showthread.php?t=2664332 | https://notabug.org/kl3/tweakprop
#   api:        XX
#

. /tmp/backuptool.functions

# INSTALLER.SH AUTOGENERATED DEF.
# _____________________________________________________________________________ <- 80 char
#

# ! AUTOGENERATED BY INSTALLER.SH !
addon_name=null
addon_src_ver=null
addon_app_rev=null

# TweakProp List Auto Generated by installer.sh
tweak_prop="
"

# Local Functions
#--------------------------------------------------------------------------#

# Initial ui_print Function 
ui_print(){
	echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
	echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
	
	[ -n "$1" ] && file_log "$1"
}

# Cold Log
file_log() {
	[ -n "$1" ] && IN="$1" || read IN
	echo "$(date "+%H:%M:%S") $IN" >> $COLD_TMP
	printf "$IN\n"
}

# local set_perm
set_perm() {
	[[ -n "$1" && -n "$2" && -n "$3" && -n "$4" ]] && {
		chown $1.$2 $4
		chown $1:$2 $4
		chmod $3 $4
	}
}

# ASLIB EXPORTED FUNCTIONS
# _____________________________________________________________________________ <- 80 char
#

# REDIRECT ASLIB LOGGING TO LOCAL LOGGING
LT1=file_log;LT2=file_log;LT3=file_log;LT4=file_log;

# ASLIB.SUB.PRINT_HEADER
print_header(){
	set=0;tmh_init=false;

	while true;do
		eval val='$'TMH${set}
		if [ "$val" == "#" ];then
			ui_print " "
		elif [ -n "$val" ]; then
			ui_print "$val"
		elif [ -z "$val" ]; then
			# ignore the first blank TMH
			[ "$tmh_init" == "true" ] && {
				break
			}
			tmh_init=true
		fi
		set=$((++set))
	done
}

##### ASLIB.SUB.IS_MOUNTED
is_mounted() {
	$LT4 "D: ASLIB exec is_mounted with $1 $2"
	[ -n "$2" ] && {
		cat /proc/mounts | grep $1 | grep $2, >/dev/null 2>&1
		s=$?
	} || {
		cat /proc/mounts | grep $1            >/dev/null 2>&1
		s=$?
	}
	[ "$s" == "0" ] && \
	$LT4 "D: ASLIB is_mounted: $1 is mounted $2" || \
	$LT4 "D: ASLIB is_mounted: $1 is not mounted"
	return $s
}

###### ASLIB.SUB.IS_ENABLED
is_enabled() {
	$LT4 "D: ASLIB exec is_enabled with $1"
	[ -z "$1" ] && return 1
	eval ie_t='$'$1
	case $ie_t in
		1|enable|true|True|TRUE|ENABLED|ENABLE) 
			$LT3 "I: ASLIB is_enabled: ENABLED, by $1 set to $ie_t"
			s=0
		;;
		0|disable|false|False|FALSE|DISABLED|DISABLE|' ')
			$LT3 "I: ASLIB is_enabled: DISABLED, by $1 set to $ie_t"
			s=1
		;;
		*) 	$LT3 "E: ASLIB is_enabled: unknown state of $1 set to $ie_t, returning 1"
			s=1
		;;
	esac
	return $s
}


##### ASLIB.SUB.TOOLBOX_MOUNT
toolbox_mount() {
	$LT4 "D: ASLIB exec toolbox_mount $1 $2"
	# default to READ_WRITE
	local RW=rw
	[ ! -z "$2" ] && RW=$2
	
	$LT4 "D: ASLIB toolbox_mount: mounting using using /etc/fstab entry"

	local DEV=;
	local POINT=;
	local FS=;
	
	for i in `cat /etc/fstab | grep "$1"`; do
		if [ -z "$DEV" ]; then
			DEV=$i
		elif [ -z "$POINT" ]; then
			POINT=$i
		elif [ -z "$FS" ]; then
			  FS=$i
			break
		fi
	done
	
	$LT4 "D: ASLIB toolbox_mount: exec mount -t $FS -o $RW $DEV $POINT"
	! mount -t $FS -o $RW $DEV $POINT               >/dev/null 2>&1 && \
	$LT4 "D: ASLIB toolbox_mount: exec mount -t $FS -o $RW,remount $DEV $POINT" && \
	! mount -t $FS -o $RW,remount $DEV $POINT       >/dev/null 2>&1 || return 0
	
	
	$LT4 "D: ASLIB toolbox_mount: mounting using using /etc/recovery.fstab"
	
	DEV=;POINT=;FS=;
	
	for i in `cat /etc/recovery.fstab | grep "$1"`; do
		if [ -z "$POINT" ]; then
			POINT=$i
		elif [ -z "$FS" ]; then
			FS=$i
		elif [ -z "$DEV" ]; then
			DEV=$i
			break
		fi
	done
	
	if [ "$FS" = "emmc" ]; then
		$LT4 "D: ASLIB toolbox_mount: exec mount -t ext4 -o $RW $DEV $POINT"
		! mount -t ext4 -o $RW $DEV $POINT            >/dev/null 2>&1 && \
		$LT4 "D: ASLIB toolbox_mount: exec mount -t ext4 -o $RW,remount $DEV $POINT" && \
		! mount -t ext4 -o $RW,remount $DEV $POINT    >/dev/null 2>&1 && \
		$LT4 "D: ASLIB toolbox_mount: exec mount -t f2fs -o $RW $DEV $POINT" && \
		! mount -t f2fs -o $RW $DEV $POINT            >/dev/null 2>&1 && \
		$LT4 "D: ASLIB toolbox_mount: exec mount -t f2fs -o $RW,remount $DEV $POINT" && \
		! mount -t f2fs -o $RW,remount $DEV $POINT    >/dev/null 2>&1 || return 0
	else
		$LT4 "D: ASLIB toolbox_mount: exec mount -t $FS -o $RW $DEV $POINT"
		! mount -t $FS -o $RW $DEV $POINT             >/dev/null 2>&1 && \
		$LT4 "D: ASLIB toolbox_mount: exec mount -t $FS -o $RW,remount $DEV $POINT" && \
		! mount -t $FS -o $RW,remount $DEV $POINT     >/dev/null 2>&1 || return 0
	fi
	return 1 # FAILED TO MOUNT
}


##### ASLIB.SUB.REMOUNT_MOUNTPOINT
remount_mountpoint() {
	$LT4 "D: ASLIB exec remount_mountpoint checking $1 $2"
	[ -n "$*" ] && {
		! is_mounted $1 $2 && \
		$LT4 "D: ASLIB remount_mountpoint: exec mount -o $2,remount $1" && \
		! mount -o $2,remount $1    >/dev/null 2>&1 && \
		$LT4 "D: ASLIB remount_mountpoint: exec mount -o $2,remount $1 $1" && \
		! mount -o $2,remount $1 $1 >/dev/null 2>&1 && \
		$LT4 "D: ASLIB remount_mountpoint: exec toolbox_mount $1" && \
		! toolbox_mount $1          >/dev/null 2>&1 && \
		{
			$LT3 "I: ASLIB remount_mountpoint: failed to remount"
			stat=1
		} || {
			$LT3 "I: ASLIB remount_mountpoint: remounted successfully"
			stat=0
		}
		return $stat
	}
}


# TweakProp Backup

# Modified addon_TPB_ex_s (exit_script) with addon_TPB_failsafe_backup integration
addon_TPB_ex_s(){
	# restore backup before exit
	[ $status_failsafe == "true" ] && addon_TPB_failsafe_backup restore
	ui_print "Error: $@"
	exit 1
}

# TweakProp Fail-Safe Backup
addon_TPB_failsafe_backup() { # Backup build.prop safely in an event that script error exist	
	case $1 in
	backup) dd if=$build of=/tmp/build.prop
			[ ! -e /tmp/build.prop ] && {
				addon_TPB_ex_s "Failed to backup build.prop"
			}
			;;
	restore)ui_print "  # Restoring build.prop Backup"
			[ ! -e /tmp/build.prop ] && {
				status_failsafe=false
				addon_TPB_ex_s "Missing build.prop Backup "
			}
			dd if=/tmp/build.prop of=$build
			chown 0.0 $build
			chmod 0644 $build
			;;
	esac
}

# TweakProp Main Script
addon_TPB_tweakprop_me() {
	# remounting /system && /data
	! is_mounted /system rw && {
		ui_print " - Remounting system"
		remount_mountpoint /system rw
	} || addon_TPB_ex_s "Failed to get RW access on /system"

	
	echo "" >> "$build"
	
	ui_print " - Set write permissions for $build"
	chmod 0666 "$build"

	ui_print " - Performing tweaks"
	
	t_count=
	
	# read only lines matching valid entry pattern (someVAR=someVAL, !someSTR, @someENTR|someSTR, $someVAR=someVAL)
	for line in $(echo "${tweak_prop#?}" | sed -r '/(^#|^ *$|^BACKUP=|^backup=|^Backup=)/d;/(.*=.*|^\!|^\@.*\|.*|^\$.*\|.*)/!d'); do
		# remove entry
		if echo "$line" | grep -q '^\!'
		then
			entry=$(echo "${line#?}" | sed -e 's~[\~&]~\\&~g')
			# remove from $build if present
			grep -q "$entry" "$build" && {
				sed "~$entry~d" -i "$build" && \
				ui_print "  -removed \"$entry\"" && \
				t_count=$((++t_count))
			}
		# append string
		elif echo "$line" | grep -q '^\@'
		then
			entry=$(echo "${line#?}" | sed -e 's~[\~&]~\\&~g')
			var=$(echo "$entry" | cut -d\| -f1)
			app=$(echo "$entry" | cut -d\| -f2)
			# append string to $var's value if present in $build
			grep -q "$var" "$build" && {
				sed "s~^$var=.*$~&$app~" -i "$build" && \
				ui_print "  -appended \"$app\" to \"$var\"" && \
				t_count=$((++t_count))
			}
		# change value only iif entry exists
		elif echo "$line" | grep -q '^\$'
		then
			entry=$(echo "${line#?}" | sed -e 's~[\~&]~\\&~g')
			var=$(echo "$entry" | cut -d\| -f1)
			new=$(echo "$entry" | cut -d\| -f2)
			# change $var's value iif $var present in $build
			grep -q "$var=" "$build" && {
				sed "s~^$var=.*$~$var=$new~" -i "$build" && \
				ui_print "  -changed \"$var\" to \"$new\"" && \
				t_count=$((++t_count))
			}
		# add or override entry
		else
			var=$(echo "$line" | cut -d= -f1)
			# if variable already present in $build
			if grep -q "$var" "$build"
			then
				# override value in $build if different
				grep -q "$(echo "${tweak_prop#?}" | grep "$var")" "$build" || {
					sed "s~^$var=.*$~$line~" -i "$build" && \
					ui_print "  -overridden \"$var\"" && \
					t_count=$((++t_count))
				}
			# else append entry to $build
			else
				echo "$line" >> "$build" && {
					ui_print "  -added \"$line\""
					t_count=$((++t_count))
				}
			fi
		fi
	done

	[ "$t_count" -gt "0" ] && {
		ui_print " - $t_count tweaks successfully applied!"
	} || ui_print " - No modifications needed"
	# trim empty and duplicate lines of $build
	sed '/^ *$/d' -i "$build"
	chmod 0644 "$build" && ui_print " - Restored buildprop permissions"
	ui_print " "
}



# Pre-Initialization
#--------------------------------------------------------------------------#

# Title Header
TMH1="addon.script"
TMH2="*******************************"
TMH3="          TWEAK-PROP B"
TMH4="*******************************"
TMH5="app: $addon_name"
TMH6="src: $addon_src_ver"
TMH7="rev: $addon_app_rev"
TMH8="#"

# FD failsafe
OUTFD=`ps | grep -v grep | grep -oE "update(.*)" | cut -d" " -f3`

# TweakpropB addon_TPB_failsafe_backup status
export status_failsafe=false

# Main
#--------------------------------------------------------------------------#

case "$1" in
  backup)
	# Stub
  ;;
  restore)
	# Stub
  ;;
  pre-backup)
	# Stub
  ;;
  post-backup)
	# Stub
  ;;
  pre-restore)
	# Stub
  ;;
  post-restore)
	TMH1="post-restore $addon_name"
	print_header
	
	# location of build prop in system
	build=/system/build.prop
	
	# Create a Failsafe Backup
	addon_TPB_failsafe_backup backup
	
	# Installing Script
	(addon_TPB_tweakprop_me) || {
		ui_print " - TweakPropB Encountered an Error"
		addon_TPB_failsafe_backup restore
	}
  ;;
esac

